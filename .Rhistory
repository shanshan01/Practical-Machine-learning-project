mode(data)
data1<-as.matrix(data)
dimension(data1)
size(data1)
nrow(data1)
ncol(data1)
ncol(data)
dnorm(0,0,1)
1/(sqrt(2*pi))
x<-c(0,0)
dnorm(x,0,1)
sum(sigma,1)
?sum
dnorm(sigma,0,1)
rowSum(sigma)
rowSums\(sigma)
rowSums(sigma)
c(1,2,3)
dim(c(1,2,3))
d*rep(1,3)-c(1,2,3)+rep(1,3)
(d*rep(1,3)-c(1,2,3)+rep(1,3)))^(-1)
(d*rep(1,3)-c(1,2,3)+rep(1,3))^(-1)
sort(c(1,2,3))
sort(c(4,2,3))
?sort
sort(c(4,2,3),decresing=T)
sort(c(4,2,3),decreAsing=T)
sort(c(4,2,3),decreasing=T)
0.01*0.05
-1
1-0.01*0.05
0.9995*0.04
exp(-25/8)
0.04393693*0.99
c<-seq(-1,1,length=100)
c<-seq(-1,1,length=100)
test<-(1-0.01*exp{c}*exp{-25*(c^2/(2*25^2)+c/50+1/8)}
for(i in 1: 100)
{
if (test[i]<0.03998|test[i]=0.03998)
{print test[i]}
}
c<-seq(-1,1,length=100)
test<-seq(length=100)
test<-(1-0.01*exp(c)*exp(-25*(c^2/(2*25^2)+c/50+1/8))
for(i in 1: 100)
{
if (test[i]<0.03998|test[i]=0.03998)
{print test[i]}
}
c<-seq(-1,1,length=100)
test<-seq(length=100)
test<-(1-0.01*exp(c)*exp(-25*(c^2/(2*25^2)+c/50+1/8))
)
c<-seq(-1,1,length=100)
test<-seq(length=100)
test<-1-0.01*exp(c)*exp(-25*(c^2/(2*25^2)+c/50+1/8))
for(i in 1:100)
{
if (test[i]<0.03998|test[i]=0.03998)
{print test[i]}
}
for(i in 1:100)
{
if (test[i]<0.03998|test[i]==0.03998)
{print test[i]}
}
if(1==1)
{x<-0)
if(1==1)
{x<-0}
x
for(i in 1:100)
{
if ((test[i]<0.03998)|(test[i]==0.03998))
{print test[i]}
}
test[1]
for(i in 1:100)
{
if ((test[i]<0.03998)|(test[i]==0.03998))
{print (test[i])}
}
test[50]
c<-seq(-1,1,length=100)
test<-seq(length=100)
test<-(1-0.01*exp(c))*exp(-25*(c^2/(2*25^2)+c/50+1/8))
for(i in 1:100)
{
if ((test[i]<0.03998)|(test[i]==0.03998))
{print (test[i])}
}
c<-seq(-1,1,length=100)
test<-seq(length=100)
test<-(1-0.01*exp(c))*exp(-25*(c^2/(2*25^2)+c/50+1/8))
for(i in 1:100)
{
if ((test[i]<0.03998)|(test[i]==0.03998))
{print c(i,test[i])}
}
c<-seq(-1,1,length=100)
test<-seq(length=100)
test<-(1-0.01*exp(c))*exp(-25*(c^2/(2*25^2)+c/50+1/8))
for(i in 1:100)
{
if ((test[i]<0.03998)|(test[i]==0.03998))
{print (i,test[i])}
}
#check c
c<-seq(-1,1,length=100)
test<-seq(length=100)
test<-(1-0.01*exp(c))*exp(-25*(c^2/(2*25^2)+c/50+1/8))
for(i in 1:100)
{
if ((test[i]<0.03998)|(test[i]==0.03998))
{print (c(i,test[i]))}
}
c<-seq(-1,1,length=100)
test<-seq(length=100)
test<-(1-0.01*exp(c))*exp(-25*(c^2/(2*25^2)+c/50+1/8))
for(i in 1:100)
{
if ((test[i]<0.03998)|(test[i]==0.03998))
{print (c(c[i],test[i]))}
}
print (alpha=0)
library(xlsx)
<span class="skimlinks-unlinked">
span class="skimlinks-unlinked"
<span class='skimlinks-unlinked'>
q()
x<-c(1,2)
plot(x)
find.package('devtools')
install.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find_rtools()
install.packages('devtools')
libray(devtools)
library(devtools)
find_rtools()
install.packages('KernSmooth')
library(KernSmooth)
setwd("C:/Users/wss/Dropbox/machine_learning/machine_learning_project_dataset")
testing<-read.csv('pml-testing.csv')
training<-read.csv('pml-training.csv')
training.new<-cbind(training[,3:4],training[,8:11],training[,37:49],training[,60:68],
training[,84:86],training[,101:102],training[,113:124],
training[,139:140],training[,151:160])
training.new<-training.new[,-32]
training.new<-training.new[,-45]
#splitting data
#
training.new.A<-training.new[training.new[,55]=='A',]
training.new.B<-training.new[training.new[,55]=='B',]
training.new.C<-training.new[training.new[,55]=='C',]
training.new.D<-training.new[training.new[,55]=='D',]
training.new.E<-training.new[training.new[,55]=='E',]
dim(training.new.A)
dim(training.new.B)
dim(training.new.C)
dim(training.new.D)
dim(training.new.E)
#
training.new.trs.A.index<-sample(5580, size=3344, replace=F)
training.new.trs.B.index<-sample(3797, size=2284, replace=F)
training.new.trs.C.index<-sample(3422, size=2049, replace=F)
training.new.trs.D.index<-sample(3216, size=1931, replace=F)
training.new.trs.E.index<-sample(3607, size=2166, replace=F)
training.new.A.trs<-training.new.A[training.new.trs.A.index,]
training.new.B.trs<-training.new.B[training.new.trs.B.index,]
training.new.C.trs<-training.new.C[training.new.trs.C.index,]
training.new.D.trs<-training.new.D[training.new.trs.D.index,]
training.new.E.trs<-training.new.E[training.new.trs.E.index,]
training.new.trs<-rbind(training.new.A.trs,training.new.B.trs,training.new.C.trs,
training.new.D.trs,training.new.E.trs)
#
training.new.A.inter<-training.new.A[-training.new.trs.A.index,]
training.new.B.inter<-training.new.B[-training.new.trs.B.index,]
training.new.C.inter<-training.new.C[-training.new.trs.C.index,]
training.new.D.inter<-training.new.D[-training.new.trs.D.index,]
training.new.E.inter<-training.new.E[-training.new.trs.E.index,]
testing.new.A.index<-sample(2236, size=1114, replace=F)
testing.new.B.index<-sample(1513, size=761, replace=F)
testing.new.C.index<-sample(1373, size=683, replace=F)
testing.new.D.index<-sample(1285, size=644, replace=F)
testing.new.E.index<-sample(1441, size=722, replace=F)
testing.new.A<-training.new.A.inter[testing.new.A.index,]
testing.new.B<-training.new.B.inter[testing.new.B.index,]
testing.new.C<-training.new.C.inter[testing.new.C.index,]
testing.new.D<-training.new.D.inter[testing.new.D.index,]
testing.new.E<-training.new.E.inter[testing.new.E.index,]
testing.new<-rbind(testing.new.A,testing.new.B,testing.new.C,testing.new.D,testing.new.E)
validating.new.A<-training.new.A.inter[-testing.new.A.index,]
validating.new.B<-training.new.B.inter[-testing.new.B.index,]
validating.new.C<-training.new.C.inter[-testing.new.C.index,]
validating.new.D<-training.new.D.inter[-testing.new.D.index,]
validating.new.E<-training.new.E.inter[-testing.new.E.index,]
validating.new<-rbind(validating.new.A,validating.new.B,validating.new.C,validating.new.D,validating.new.E)
testing.new[1"3",1:54]
testing.new[1:3,1:54]
data.frame(testing[,1:54])
data.frame(testing.new[,1:54])
library(caret)
?predict
data(iris)
inTrain<-createDataPartition(y=iris$Species,p=0.7,list=F)
training<-iris[inTrain,]
testing<-iris[-inTrain,]
fit<-train(Species~., data=training,method='rf')
fit<-train(Species~., data=training,method='rf')
pred<-predict(fit,testing)
pred
dim(training)
dim(testing)
iris[1:2]
iris[1:2,]
confusionMatrix(pred,testing[,5])
?trainControl
pred<-predict(fit,testing[,1:4])
confusionMatrix(pred,testing[,5])
data.frame(training.new.trs)
training.new.trs$classe
#read in testing and training data
testing<-read.csv('pml-testing.csv')
training<-read.csv('pml-training.csv')
#remove missing values
training.new<-cbind(training[,1:11],training[,37:49],training[,60:68],
training[,84:86],training[,101:102],training[,113:124],
training[,139:140],training[,151:160])
#remove index, user_name, cvtd_timestamp, new_window and num_windown
training.new<-cbind(training[,3:4],training[,8:11],training[,37:49],training[,60:68],
training[,84:86],training[,101:102],training[,113:124],
training[,139:140],training[,151:160])
training.new<-training.new[,-32]
training.new<-training.new[,-45]
#splitting data
#
training.new.A<-training.new[training.new[,55]=='A',]
training.new.B<-training.new[training.new[,55]=='B',]
training.new.C<-training.new[training.new[,55]=='C',]
training.new.D<-training.new[training.new[,55]=='D',]
training.new.E<-training.new[training.new[,55]=='E',]
dim(training.new.A)
dim(training.new.B)
dim(training.new.C)
dim(training.new.D)
dim(training.new.E)
#
training.new.trs.A.index<-sample(5580, size=3344, replace=F)
training.new.trs.B.index<-sample(3797, size=2284, replace=F)
training.new.trs.C.index<-sample(3422, size=2049, replace=F)
training.new.trs.D.index<-sample(3216, size=1931, replace=F)
training.new.trs.E.index<-sample(3607, size=2166, replace=F)
training.new.A.trs<-training.new.A[training.new.trs.A.index,]
training.new.B.trs<-training.new.B[training.new.trs.B.index,]
training.new.C.trs<-training.new.C[training.new.trs.C.index,]
training.new.D.trs<-training.new.D[training.new.trs.D.index,]
training.new.E.trs<-training.new.E[training.new.trs.E.index,]
training.new.trs<-rbind(training.new.A.trs,training.new.B.trs,training.new.C.trs,
training.new.D.trs,training.new.E.trs)
training.new.trs<-data.frame(training.new.trs)
#
training.new.A.inter<-training.new.A[-training.new.trs.A.index,]
training.new.B.inter<-training.new.B[-training.new.trs.B.index,]
training.new.C.inter<-training.new.C[-training.new.trs.C.index,]
training.new.D.inter<-training.new.D[-training.new.trs.D.index,]
training.new.E.inter<-training.new.E[-training.new.trs.E.index,]
testing.new.A.index<-sample(2236, size=1114, replace=F)
testing.new.B.index<-sample(1513, size=761, replace=F)
testing.new.C.index<-sample(1373, size=683, replace=F)
testing.new.D.index<-sample(1285, size=644, replace=F)
testing.new.E.index<-sample(1441, size=722, replace=F)
testing.new.A<-training.new.A.inter[testing.new.A.index,]
testing.new.B<-training.new.B.inter[testing.new.B.index,]
testing.new.C<-training.new.C.inter[testing.new.C.index,]
testing.new.D<-training.new.D.inter[testing.new.D.index,]
testing.new.E<-training.new.E.inter[testing.new.E.index,]
testing.new<-rbind(testing.new.A,testing.new.B,testing.new.C,testing.new.D,testing.new.E)
testing.new<-data.frame(testing.new)
validating.new.A<-training.new.A.inter[-testing.new.A.index,]
validating.new.B<-training.new.B.inter[-testing.new.B.index,]
validating.new.C<-training.new.C.inter[-testing.new.C.index,]
validating.new.D<-training.new.D.inter[-testing.new.D.index,]
validating.new.E<-training.new.E.inter[-testing.new.E.index,]
validating.new<-rbind(validating.new.A,validating.new.B,validating.new.C,validating.new.D,validating.new.E)
validating.new<-data.frame(validating.new)
##############################################################
#model training and comparison
library(caret)
set.seed(1234)
#model1
library(randomForest)
ctrl <- trainControl(method = "repeatedcv",
repeats = 3)
model1<-train(training.new.trs$classe~.,
method='rf', data=training.new.trs, preProc=c("center","scale"),
trControl = ctrl)
#prediction
#on test set
pred<-predict(model1,testing.new)
Predright_prop<-(sum(pred==testing.new[,55])/nrow(testing.new))
table(pred,testing.new[,55])
#on validation set
#pred.val<-predict(model1,validating.new[1:54,])
#Predright_prop<-(sum(pred.val==validating.new[,55])/nrow(validating.new))
#table(pred.val,validating.new[,55])
#on 20 obs
#testing.20<-cbind(testing[,3:4],testing[,8:11],testing[,37:49],testing[,60:68],
#                  testing[,84:86],testing[,101:102],testing[,113:124],
#                  testing[,139:140],testing[,151:159])
#testing.20<-testing.20[,-32]
#testing.20<-testing.20[,-45]
#testing.20<-data.frame(testing.20)
#pred.20<-predict(model1,testing.20)
Predright_prop
model2<-train(training.new.trs$classe~.,
method='rf', data=training.new.trs, preProc="pca",
trControl = ctrl)
warnings()
pred2<-predict(model2,training.new)
Predright_prop2<-(sum(pred2==testing.new[,55])/nrow(testing.new))
table(pred2,testing.new[,55])
pred2<-predict(model2,training.new)
pred2
pred2<-predict(model2,testing.new)
Predright_prop2<-(sum(pred2==testing.new[,55])/nrow(testing.new))
table(pred2,testing.new[,55])
pred2<-predict(model2,testing.new)
Predright_prop2<-(sum(pred2==testing.new[,55])/nrow(testing.new))
table(pred2,testing.new[,55])
Predright_prop2
apply(training.new.trs,2,sum)
apply(training.new.trs,max,2)
apply(as,matrix(training.new.trs),2,max)
?apply
apply(as.matrix(training.new.trs),2,max)
apply(as.matrix(testing.new),2,max)
apply(as.matrix(validating.new),2,max)
apply(as.matrix(testing.20),2,max)
testing.20<-cbind(testing[,3:4],testing[,8:11],testing[,37:49],testing[,60:68],
testing[,84:86],testing[,101:102],testing[,113:124],
testing[,139:140],testing[,151:159])
testing.20<-testing.20[,-32]
testing.20<-testing.20[,-45]
testing.20<-data.frame(testing.20)
apply(as.matrix(testing.20),2,max)
testing.20<-data.frame(testing.20)
validating.new<-data.frame(validating.new)
testing.new<-data.frame(testing.new)
training.new.trs<-data.frame(training.new.trs)
training.new.trs.stand<-scale(training.new.trs)
training.new.trs.stand<-scale(as.matrix(training.new.trs)
)
training.new.trs.stand<-scale(as.numeric(training.new.trs))
training.new.trs.stand<-scale(as.matrix(training.new.trs))
mode(training.new.trs)
mode(as.numeric(training.new.trs))
testing<-read.csv('pml-testing.csv')
training<-read.csv('pml-training.csv')
#remove missing values
training.new<-cbind(training[,1:11],training[,37:49],training[,60:68],
training[,84:86],training[,101:102],training[,113:124],
training[,139:140],training[,151:160])
#remove index, user_name, cvtd_timestamp, new_window and num_windown
training.new<-cbind(training[,3:4],training[,8:11],training[,37:49],training[,60:68],
training[,84:86],training[,101:102],training[,113:124],
training[,139:140],training[,151:160])
training.new<-training.new[,-32]
training.new<-training.new[,-45]
#splitting data
#
training.new.A<-training.new[training.new[,55]=='A',]
training.new.B<-training.new[training.new[,55]=='B',]
training.new.C<-training.new[training.new[,55]=='C',]
training.new.D<-training.new[training.new[,55]=='D',]
training.new.E<-training.new[training.new[,55]=='E',]
dim(training.new.A)
dim(training.new.B)
dim(training.new.C)
dim(training.new.D)
dim(training.new.E)
#
training.new.trs.A.index<-sample(5580, size=3344, replace=F)
training.new.trs.B.index<-sample(3797, size=2284, replace=F)
training.new.trs.C.index<-sample(3422, size=2049, replace=F)
training.new.trs.D.index<-sample(3216, size=1931, replace=F)
training.new.trs.E.index<-sample(3607, size=2166, replace=F)
training.new.A.trs<-training.new.A[training.new.trs.A.index,]
training.new.B.trs<-training.new.B[training.new.trs.B.index,]
training.new.C.trs<-training.new.C[training.new.trs.C.index,]
training.new.D.trs<-training.new.D[training.new.trs.D.index,]
training.new.E.trs<-training.new.E[training.new.trs.E.index,]
training.new.trs<-rbind(training.new.A.trs,training.new.B.trs,training.new.C.trs,
training.new.D.trs,training.new.E.trs)
training.new.trs.stand<-scale(training.new.trs)
mode(training.new.trs)
mode(as.matrix(training.new.trs))
mode(as.numeric(training.new.trs))
warnings()
training.new.trs<-data.frame(training.new.trs)
scale(training.new.trs[,1])
training.new.trs.stan<-apply(training.new.trs,2,scale)
training.new.trs.stan<-apply(training.new.trs[,1:54],2,scale)
training.new.trs.stan
training.new.trs.stan<-cbind(training.new.trs.stan,training.new.trs[,55])
training.new.trs.stan<-data.frame(training.new.trs.stan)
training.new.trs.stan
training.new.trs[,55]
training.new.trs.stan<-cbind(training.new.trs.stan,as.factor(training.new.trs[,55])
)
training.new.trs.stan
training.new.trs.stan<-data.frame(training.new.trs.stan)
training.new.trs.stan
training.new.trs.stan<-apply(training.new.trs[,1:54],2,scale)
training.new.trs.stan<-cbind(training.new.trs.stan,as.factor(training.new.trs[,55]))
names(training.new.trs.stan[,55])<-'classe'
training.new.trs.stan<-data.frame(training.new.trs.stan)
training.new.trs.stan
testing<-read.csv('pml-testing.csv')
training<-read.csv('pml-training.csv')
#remove missing values
training.new<-cbind(training[,1:11],training[,37:49],training[,60:68],
training[,84:86],training[,101:102],training[,113:124],
training[,139:140],training[,151:160])
#remove index, user_name, cvtd_timestamp, new_window and num_windown
training.new<-cbind(training[,3:4],training[,8:11],training[,37:49],training[,60:68],
training[,84:86],training[,101:102],training[,113:124],
training[,139:140],training[,151:160])
training.new<-training.new[,-32]
training.new<-training.new[,-45]
#splitting data
#
training.new.A<-training.new[training.new[,55]=='A',]
training.new.B<-training.new[training.new[,55]=='B',]
training.new.C<-training.new[training.new[,55]=='C',]
training.new.D<-training.new[training.new[,55]=='D',]
training.new.E<-training.new[training.new[,55]=='E',]
dim(training.new.A)
dim(training.new.B)
dim(training.new.C)
dim(training.new.D)
dim(training.new.E)
#
training.new.trs.A.index<-sample(5580, size=3344, replace=F)
training.new.trs.B.index<-sample(3797, size=2284, replace=F)
training.new.trs.C.index<-sample(3422, size=2049, replace=F)
training.new.trs.D.index<-sample(3216, size=1931, replace=F)
training.new.trs.E.index<-sample(3607, size=2166, replace=F)
training.new.A.trs<-training.new.A[training.new.trs.A.index,]
training.new.B.trs<-training.new.B[training.new.trs.B.index,]
training.new.C.trs<-training.new.C[training.new.trs.C.index,]
training.new.D.trs<-training.new.D[training.new.trs.D.index,]
training.new.E.trs<-training.new.E[training.new.trs.E.index,]
training.new.trs<-rbind(training.new.A.trs,training.new.B.trs,training.new.C.trs,
training.new.D.trs,training.new.E.trs)
training.new.trs<-data.frame(training.new.trs)
#
training.new.A.inter<-training.new.A[-training.new.trs.A.index,]
training.new.B.inter<-training.new.B[-training.new.trs.B.index,]
training.new.C.inter<-training.new.C[-training.new.trs.C.index,]
training.new.D.inter<-training.new.D[-training.new.trs.D.index,]
training.new.E.inter<-training.new.E[-training.new.trs.E.index,]
testing.new.A.index<-sample(2236, size=1114, replace=F)
testing.new.B.index<-sample(1513, size=761, replace=F)
testing.new.C.index<-sample(1373, size=683, replace=F)
testing.new.D.index<-sample(1285, size=644, replace=F)
testing.new.E.index<-sample(1441, size=722, replace=F)
testing.new.A<-training.new.A.inter[testing.new.A.index,]
testing.new.B<-training.new.B.inter[testing.new.B.index,]
testing.new.C<-training.new.C.inter[testing.new.C.index,]
testing.new.D<-training.new.D.inter[testing.new.D.index,]
testing.new.E<-training.new.E.inter[testing.new.E.index,]
testing.new<-rbind(testing.new.A,testing.new.B,testing.new.C,testing.new.D,testing.new.E)
testing.new<-data.frame(testing.new)
validating.new.A<-training.new.A.inter[-testing.new.A.index,]
validating.new.B<-training.new.B.inter[-testing.new.B.index,]
validating.new.C<-training.new.C.inter[-testing.new.C.index,]
validating.new.D<-training.new.D.inter[-testing.new.D.index,]
validating.new.E<-training.new.E.inter[-testing.new.E.index,]
validating.new<-rbind(validating.new.A,validating.new.B,validating.new.C,validating.new.D,validating.new.E)
validating.new<-data.frame(validating.new)
library(caret)
set.seed(1234)
#model1
library(randomForest)
ctrl <- trainControl(method = "repeatedcv",
repeats = 3)
model1<-train(training.new.trs$classe~.,
method='rf', data=training.new.trs, preProc=c("center","scale"),
trControl = ctrl)
model1
pred<-predict(model1,testing.new)
Predright_prop<-(sum(pred==testing.new[,55])/nrow(testing.new))
table(pred,testing.new[,55])
Predright_prop
pred.val<-predict(model1,validating.new)
Predright_prop2<-(sum(pred.val==validating.new[,55])/nrow(validating.new))
table(pred.val,validating.new[,55])
Predright_prop2
testing.20<-cbind(testing[,3:4],testing[,8:11],testing[,37:49],testing[,60:68],
testing[,84:86],testing[,101:102],testing[,113:124],
testing[,139:140],testing[,151:159])
testing.20<-testing.20[,-32]
testing.20<-testing.20[,-45]
testing.20<-data.frame(testing.20)
pred.20<-predict(model1,testing.20)
pred.20
source('~/.active-rstudio-document')
library(knitr)
